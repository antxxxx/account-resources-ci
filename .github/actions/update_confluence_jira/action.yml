name: 'Create confluence release notes'
description: 'Do release note actions in confluence and jira'
inputs:
  TARGET_ENVIRONMENT:
    required: true
    description: "Target Environment"
  RELEASE_TAG:
    required: false
    description: "The tag we are releasing - only used for create_rc_release_notes"
  CREATE_RC_RELEASE_NOTES:
    required: true
    description: "whether to create rc release notes page instead of normal release notes"
    default: "false"
  EXECUTE_RELEASE_NOTES_LAMBDA_ROLE:
    required: true
    description: "The role to assume to execute the release notes lambda"
  DEV_CLOUD_FORMATION_CHECK_VERSION_ROLE:
    required: true
    description: "The dev cloud formation deploy role"
  TARGET_CLOUD_FORMATION_CHECK_VERSION_ROLE:
    required: true
    description: "The target cloud formation deploy role"
  DRY_RUN:
    required: false
    description: "whether to use a dry run and do not connect to anything"
    default: "true"

runs:
  using: "composite"
  steps:
    - name: connect to target account
      if: inputs.DRY_RUN != 'true'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: eu-west-2
        role-to-assume: ${{ inputs.TARGET_CLOUD_FORMATION_CHECK_VERSION_ROLE }}
        role-session-name: github-actions
    - name: Get deployed tags on target
      shell: bash
      run: |
        # get current deployed tags on target
        if [ "${{ inputs.DRY_RUN}}" != "true" ]; then
          export current_deployed_account_resources_tag=$(aws cloudformation describe-stacks --stack-name account-resources --query "Stacks[0].Tags[?Key=='version'].Value" --output text)
          export current_deployed_ci_resources_tag=$(aws cloudformation describe-stacks --stack-name ci-resources --query "Stacks[0].Tags[?Key=='version'].Value" --output text)
        else
          export current_deployed_account_resources_tag="current_deployed_tag"
          export current_deployed_ci_resources_tag="current_deployed_tag"
        fi

        if [ "${current_deployed_account_resources_tag}" != "${current_deployed_ci_resources_tag}" ]; then
          echo "ci-resources and account-resources tags do not match in target. Please investigate"
          exit 1
        fi

        echo "current_deployed_tag=${current_deployed_ci_resources_tag}" >> "$GITHUB_ENV"
    - name: connect to dev account to get tags
      if: inputs.DRY_RUN != 'true'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: eu-west-2
        role-to-assume: ${{ inputs.DEV_CLOUD_FORMATION_CHECK_VERSION_ROLE }}
        role-session-name: github-actions
    - name: get current dev tag
      shell: bash
      run: |
        # get current dev tag
        if [ "${{ inputs.DRY_RUN}}" != "true" ]; then
          export dev_account_resources_tag=$(aws cloudformation describe-stacks --stack-name account-resources --query "Stacks[0].Tags[?Key=='version'].Value" --output text)
          export dev_ci_resources_tag=$(aws cloudformation describe-stacks --stack-name ci-resources --query "Stacks[0].Tags[?Key=='version'].Value" --output text)
        else
          export dev_account_resources_tag="current_deployed_tag"
          export dev_ci_resources_tag="current_deployed_tag"
        fi

        if [ "${dev_account_resources_tag}" != "${dev_account_resources_tag}" ]; then
          echo "ci-resources and account-resources tags do not match in dev. Please investigate"
          exit 1
        fi
        echo "dev_tag=${dev_account_resources_tag}" >> "$GITHUB_ENV"
    - name: connect to dev account to run release notes lambda
      if: inputs.DRY_RUN != 'true'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: eu-west-2
        role-to-assume: ${{ inputs.EXECUTE_RELEASE_NOTES_LAMBDA_ROLE }}
        role-session-name: github-actions
    - name: create int release notes
      shell: bash
      if: inputs.TARGET_ENVIRONMENT == 'int' && inputs.CREATE_RC_RELEASE_NOTES == 'false'
      run: |
        # create int release notes
        cat <<EOF > payload.json
        { 
            "currentTag": "$current_deployed_tag", 
            "targetTag": "$dev_tag", 
            "repoName": "electronic-prescription-service-account-resources", 
            "targetEnvironment": "INT", 
            "productName": "AWS account resources layer", 
            "releaseNotesPageId": "749733665", 
            "releaseNotesPageTitle": "Current AWS account resources release notes - INT"
        }
        EOF
        cat payload.json
        if [ "${{ inputs.DRY_RUN}}" != "true" ]; then
          aws lambda invoke --function-name release-notes-createReleaseNotes \
          --cli-binary-format raw-in-base64-out \
          --payload file://payload.json out.txt
        fi
    - name: create int rc release notes
      shell: bash
      if: inputs.TARGET_ENVIRONMENT == 'int' && inputs.CREATE_RC_RELEASE_NOTES == 'true'
      run: |
        # create int rc release notes
        release_tag="${{ inputs.RELEASE_TAG }}"
        cat <<EOF > payload.json
        { 
            "currentTag": "$current_deployed_tag", 
            "targetTag": "$release_tag", 
            "repoName": "electronic-prescription-service-account-resources", 
            "targetEnvironment": "INT", 
            "productName": "AWS account resources layer", 
            "releaseNotesPageId": "749733675", 
            "releaseNotesPageTitle": "AWS-account-resources-$release_tag - Deployed to [INT] on $(date +'%d-%m-%y')",
            "createReleaseCandidate": "true",
            "releasePrefix": "AWS-account-resources-"
        }
        EOF
        cat payload.json
        if [ "${{ inputs.DRY_RUN}}" != "true" ]; then
          aws lambda invoke --function-name release-notes-createReleaseNotes \
          --cli-binary-format raw-in-base64-out \
          --payload file://payload.json out.txt
        fi
    - name: create prod release notes
      shell: bash
      if: inputs.TARGET_ENVIRONMENT == 'prod'
      run: |
        # create prod release notes
        cat <<EOF > payload.json
        { 
            "currentTag": "$current_deployed_tag", 
            "targetTag": "$dev_tag", 
            "repoName": "electronic-prescription-service-account-resources", 
            "targetEnvironment": "PROD", 
            "productName": "AWS account resources layer", 
            "releaseNotesPageId": "749733670", 
            "releaseNotesPageTitle": "Current AWS account resources release notes - PROD"
        }
        EOF
        cat payload.json
        if [ "${{ inputs.DRY_RUN}}" != "true" ]; then
          aws lambda invoke --function-name release-notes-createReleaseNotes \
            --cli-binary-format raw-in-base64-out \
            --payload file://payload.json out.txt
        fi
